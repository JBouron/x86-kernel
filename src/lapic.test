#include <test.h>
#include <interrupt.h>
#include <cpu.h>
#include <percpu.h>
#include <kmalloc.h>

// Test/Check that the processor supports LAPIC.
static bool has_lapic(void) {
    // From Intel's manual chapter 10.4.2 Presence of the Local APIC: 
    // "Beginning with the P6 family processors, the presence or absence of an
    // on-chip local APIC can be detected using the CPUID instruction. When the
    // CPUID instruction is executed with a source operand of 1 in the EAX
    // register, bit 9 of the CPUID feature flags returned in the EDX register
    // indicates the presence (set) or absence (clear) of a local APIC."
    uint32_t const eax = 1;
    uint32_t edx = 0;
    cpuid(eax, NULL, NULL, NULL, &edx);
    return (1 << 9) & edx;
}

// Test get_lapic_base_addr_test.
static bool get_lapic_base_addr_test(void) {
    return get_lapic_base_addr() == (void*)0xFEE00000;
}

// Test enable_apic.
static bool enable_apic_test(void) {
    uint64_t const apic_base_msr = read_msr(IA32_APIC_BASE_MSR);
    enable_apic();
    uint64_t const new_msr = read_msr(IA32_APIC_BASE_MSR);
    uint64_t const expected = apic_base_msr | (1 << 11);
    return new_msr == expected;
}

// This test sets up a LAPIC timer in one shot mode and makes sure that the
// interrupt get generated onces the timer reaches 0.
// The vector to use once the timer reaches 0.
static uint8_t const timer_vector = 32;
static uint32_t const timer_init_count = 50;
static bool is_periodic = false;
// How many periods of the timers ?
static uint8_t timer_periods = 0;
// The flag variable indicating success.
static bool volatile timer_success = false;
// The callback to associate with the interrupt.
static void timer_interrupt_callback(struct interrupt_frame const * const f) {
    // Just so f is used.
    ASSERT(f);

    timer_periods ++;
    if (is_periodic) {
        if (timer_periods == 4) {
            // This is the periodic test. We expect 4 periods before success.
            timer_success = true;
            lapic_stop_timer();
        }
    } else {
        // In one-shot mode we expect the current count of the timer to be 0.
        timer_success = LAPIC->current_count.val == 0;
        lapic_stop_timer();
    }
}
static bool one_shot_lapic_timer_test(void) {
    is_periodic = false;
    timer_success = false;

    // Init and start a one shot timer.
    lapic_start_timer(timer_init_count,
        false, timer_vector, timer_interrupt_callback);
    cpu_set_interrupt_flag(true);

    while (!timer_success) {
        cpu_pause();
        // Nothing to do;
    }
    // Timer was a success.

    interrupt_delete_local_callback(timer_vector);
    return true;
}
static bool periodic_lapic_timer_test(void) {
    is_periodic = true;
    timer_success = false;
    timer_periods = 0;
    // Init and start a one shot timer.
    lapic_start_timer(timer_init_count,
        true, timer_vector, timer_interrupt_callback);
    cpu_set_interrupt_flag(true);

    while (!timer_success) {
        // Nothing to do;
    }
    // Timer was a success.

    cpu_set_interrupt_flag(false);
    interrupt_delete_local_callback(timer_vector);
    return timer_periods == 4;
}

static bool volatile *received_ipi = NULL;
static uint32_t const ipi_vector = 32;
static void ipi_handler(struct interrupt_frame const * const frame) {

    uint8_t const cpuid = cpu_id();
    uint8_t const vector = frame->vector;
    if (vector == ipi_vector) {
        LOG("CPU %u received IPI\n", cpuid);
        received_ipi[cpuid] = true;
    } else {
        LOG("CPU %u: unexpected interrupt (%u) in test IPI\n", cpuid, vector);
    }
}
static bool lapic_send_ipi_test(void) {
    // Assume that no cpu is overriding the callback with a local callback for
    // the IPI vector.
    interrupt_register_global_callback(ipi_vector, ipi_handler);

    uint8_t const ncpus = acpi_get_number_cpus();
    received_ipi = kmalloc(ncpus * sizeof(*received_ipi));

    cpu_set_interrupt_flag(true);

    for (uint8_t cpu = 0; cpu < acpi_get_number_cpus(); ++cpu)  {
        // Send the IPI to the target cpu, which can be the current CPU!
        lapic_send_ipi(cpu, ipi_vector);

        // Wait for the remote cpu to set its flag.
        uint8_t iter = 0;
        uint8_t max_iter = 10;
        while (!received_ipi[cpu]) {
            lapic_sleep(50);
            ++iter;
            if (iter == max_iter) {
                // Timeout.
                LOG("Timeout for CPU %u\n", cpu);
                return false;
            }
        }
    }
    kfree((void*)received_ipi);
    interrupt_delete_global_callback(ipi_vector);
    return true;
}

static bool lapic_send_ipi_broadcast_test(void) {
    uint8_t const ncpus = acpi_get_number_cpus();
    received_ipi = kmalloc(ncpus * sizeof(*received_ipi));

    interrupt_register_global_callback(ipi_vector, ipi_handler);
    lapic_send_ipi(IPI_BROADCAST, ipi_vector);

    uint8_t iter = 0;
    uint8_t max_iter = 10;
    bool done = false;

    while (!done) {
        ++iter;
        if (iter == max_iter) {
            return false;
        }
        lapic_sleep(50);
        done = true;
        for (uint8_t cpu = 0; cpu < ncpus; ++cpu)  {
            if (cpu == cpu_id()) {
                continue;
            }
            if (!received_ipi[cpu]) {
                done = false;
                break;
            }
        }
    }

    kfree((void*)received_ipi);
    interrupt_delete_global_callback(ipi_vector);
    return true;
}

void lapic_test(void) {
    TEST_FWK_RUN(has_lapic);
    TEST_FWK_RUN(get_lapic_base_addr_test);
    TEST_FWK_RUN(enable_apic_test);
    TEST_FWK_RUN(one_shot_lapic_timer_test);
    TEST_FWK_RUN(periodic_lapic_timer_test);
    TEST_FWK_RUN(lapic_send_ipi_test);
    TEST_FWK_RUN(lapic_send_ipi_broadcast_test);
}
