#include <test.h>
#include <ipm.h>
#include <smp.h>
#include <lock_test_helpers.h>

static bool rwlock_two_readers_test(void) {
    DECLARE_RW_LOCK(lock);

    struct step * steps[] = {
        // Step 1: Target 0 acquire read lock.
        create_step(&lock, 2, 1,
                    RWLOCK_READ_LOCK, NONE,
                    true, true),

        // Step 2: Target 1 acquire read lock.
        create_step(&lock, 2, 1,
                    NONE, RWLOCK_READ_LOCK,
                    true, true),

        // Step 3: Target 0 releases read lock.
        create_step(&lock, 2, 1,
                    RWLOCK_READ_UNLOCK, NONE,
                    true, true),

        // Step 4: Target 1 releases read lock.
        create_step(&lock, 2, 1,
                    NONE, RWLOCK_READ_UNLOCK,
                    true, true),
    };
    uint32_t const num_steps = sizeof(steps) / sizeof(*steps);
    
    for (uint32_t i = 0; i < num_steps; ++i) {
        TEST_ASSERT(run_and_check_step(steps[i]));
        delete_step(steps[i]);
    }
    init_aps();
    return true;
}

static bool rwlock_two_writers_test(void) {
    for (uint32_t i = 0; i < 8; ++i) {
        DECLARE_RW_LOCK(lock);
        struct step * const step = 
            create_step(&lock, 2, 2,
                        RWLOCK_WRITE_LOCK, RWLOCK_WRITE_LOCK,
                        true, false,
                        false, true);
        TEST_ASSERT(run_and_check_step(step));
        delete_step(step);
    }
    init_aps();
    return true;
}

static bool rwlock_single_reader_single_writer_test(void) {
    for (uint32_t i = 0; i < 8; ++i) {
        DECLARE_RW_LOCK(lock);
        struct step * const step = 
            create_step(&lock, 2, 2,
                        RWLOCK_WRITE_LOCK, RWLOCK_READ_LOCK,
                        true, false,
                        false, true);
        TEST_ASSERT(run_and_check_step(step));
        delete_step(step);
    }
    init_aps();
    return true;
}

static bool rwlock_multiple_readers_single_writer_test(void) {
    for (uint32_t i = 0; i < 8; ++i) {
        DECLARE_RW_LOCK(lock);
        struct step * const step = 
            create_step(&lock, 3, 2,
                        RWLOCK_WRITE_LOCK, RWLOCK_READ_LOCK, RWLOCK_READ_LOCK,
                        true, false, false,
                        false, true, true);
        TEST_ASSERT(run_and_check_step(step));
        delete_step(step);
    }
    init_aps();
    return true;
}

// A more advanced version of rwlock_multiple_readers_single_writer_test.
static bool rwlock_multiple_readers_single_writer_scenario_test(void) {
    for (uint32_t i = 0; i < 8; ++i) {
        DECLARE_RW_LOCK(lock);
        struct step * const steps[] = {
            // Step 1: Target 0 acquire a read lock.
            create_step(&lock, 3, 1,
                        RWLOCK_READ_LOCK, NONE, NONE,
                        true, true, true),
            // Step 2: Target 1 tries to acquire a write lock, while Target 3
            // tries to acquire a read lock.
            create_step(&lock, 3, 1,
                        NONE, RWLOCK_WRITE_LOCK, RWLOCK_READ_LOCK,
                        true, false, true),
            // Step 3: Target 0 unlocks.
            create_step(&lock, 3, 1,
                        RWLOCK_READ_UNLOCK, RWLOCK_WRITE_LOCK, NONE,
                        true, false, true),
            // Step 4: Target 2 unlocks;
            create_step(&lock, 3, 1,
                        NONE, NONE, RWLOCK_READ_UNLOCK,
                        true, true, true),
            // Step 5: Target 1 acquires write lock.
            create_step(&lock, 3, 1,
                        NONE, RWLOCK_WRITE_LOCK, NONE,
                        true, true, true),
            // Step 6: Target 0 and 2 try to acquire read lock.
            create_step(&lock, 3, 1,
                        RWLOCK_READ_LOCK, NONE, RWLOCK_READ_LOCK,
                        false, true, false),
        };
        uint32_t const num_steps = sizeof(steps) / sizeof(*steps);
        for (uint32_t i = 0; i < num_steps; ++i) {
            TEST_ASSERT(run_and_check_step(steps[i]));
            delete_step(steps[i]);
        }
        init_aps();
    }
    return true;
}

void rwlock_test(void) {
    TEST_FWK_RUN(rwlock_two_readers_test);
    TEST_FWK_RUN(rwlock_two_writers_test);
    TEST_FWK_RUN(rwlock_single_reader_single_writer_test);
    TEST_FWK_RUN(rwlock_multiple_readers_single_writer_test);
    TEST_FWK_RUN(rwlock_multiple_readers_single_writer_scenario_test);
}
