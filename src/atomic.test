#include <test.h>
#include <lapic.h>
#include <percpu.h>
#include <acpi.h>
#include <ipm.h>

// Indicate when a cpu is done executing the _atomic_test_helper function.
DECLARE_PER_CPU(bool, atomic_test_helper_done);

// Arguments passed to the _atomic_test_helper function when executing remote
// calls. This allow the helper function to behave differently in different
// tests.
struct atomic_test_helper_args_t {
    // The target atomic_t to operate on.
    atomic_t *target;
    // The number of updates on the atomic_t.
    uint32_t N;
    // If 0, the _atomic_test_helper will call atomic_add N times on target.
    // If 1, the _atomic_test_helper will call atomic_fetch_and_add N times on
    // target.
    uint8_t mode;
};

static void _atomic_test_helper(void * arg) {
    struct atomic_test_helper_args_t const * const params = arg;
    atomic_t * const atomic = params->target;
    int32_t const val = this_cpu_var(cpu_id);
    for (uint32_t i = 0; i < params->N; ++i) {
        if (params->mode == 0) {
            atomic_add(atomic, val);
        } else if (params->mode == 1) {
            atomic_fetch_and_add(atomic, val);
        } else {
            PANIC("Invalid mode");
        }
    }
    this_cpu_var(atomic_test_helper_done) = true;
}

// Stress test atomic_add. In this test all other cpus will call atomic_add on
// the same atomic_t.
static bool atomic_add_stress_test(void) {
    atomic_t atomic;
    atomic_init(&atomic, 0);

    uint8_t const ncpus = acpi_get_number_cpus();
    uint8_t const this_cpu = this_cpu_var(cpu_id);
    for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
        cpu_var(atomic_test_helper_done, cpu) = (cpu == this_cpu)?true : false;
    }

    struct atomic_test_helper_args_t args = {
        .target = &atomic,
        .N = 1000,
        .mode = 0,
    };

    struct remote_call_t const rem_call = {
        .func = _atomic_test_helper,
        .arg = &args,
    };
    broadcast_remote_call(&rem_call);

    int32_t expected_value = 0;
    for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
        expected_value += 1000 * ((cpu == this_cpu) ? 0 : cpu);
    }

    uint32_t const steps = 0;
    uint32_t const max_steps = 50;
    bool success = false;
    while (!success && (steps < max_steps)) {
        success = true;
        for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
            bool const done = cpu_var(atomic_test_helper_done, cpu);
            if (!done) {
                success = false;
                break;
            }
        }
        lapic_sleep(10);
    }
    if (steps == max_steps) {
        // Timed out while waiting for all cpus to complete their task.
        return false;
    } else {
        return atomic_read(&atomic) == expected_value;
    }
}

// Test the basic functionality of atomic_fetch_and_add, that is:
// - The value is added to the atomic_t.
// - The function returns the value of the atomic_t _before_ the addition.
static bool atomic_fetch_and_add_basic_test(void) {
    atomic_t atomic;
    atomic_init(&atomic, 0);

    int32_t step = 123;
    for (uint32_t i = 0; i < 10000; ++i) {
        int32_t const curr_value = atomic_read(&atomic);
        TEST_ASSERT(curr_value == atomic_fetch_and_add(&atomic, step));
        int32_t const new_value = atomic_read(&atomic);
        TEST_ASSERT(new_value == curr_value + step);
    }
    return true;
}

// Stress test atomic_fetch_and_add by making all other cpus call
// atomic_fetch_and_add on the same atomic_t.
static bool atomic_fetch_and_add_stress_test(void) {
    atomic_t atomic;
    atomic_init(&atomic, 0);

    uint8_t const ncpus = acpi_get_number_cpus();
    uint8_t const this_cpu = this_cpu_var(cpu_id);
    for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
        cpu_var(atomic_test_helper_done, cpu) = (cpu == this_cpu)?true : false;
    }

    struct atomic_test_helper_args_t args = {
        .target = &atomic,
        .N = 1000,
        .mode = 1,
    };

    struct remote_call_t const rem_call = {
        .func = _atomic_test_helper,
        .arg = &args,
    };
    broadcast_remote_call(&rem_call);

    int32_t expected_value = 0;
    for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
        expected_value += 1000 * ((cpu == this_cpu) ? 0 : cpu);
    }

    uint32_t const steps = 0;
    uint32_t const max_steps = 50;
    bool success = false;
    while (!success && (steps < max_steps)) {
        success = true;
        for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
            bool const done = cpu_var(atomic_test_helper_done, cpu);
            if (!done) {
                success = false;
                break;
            }
        }
        lapic_sleep(10);
    }
    if (steps == max_steps) {
        // Timed out while waiting for all cpus to complete their task.
        return false;
    } else {
        return atomic_read(&atomic) == expected_value;
    }
}

static bool atomic_dec_and_test_basic_test(void) {
    uint32_t const init_val = 1024;
    atomic_t atomic;
    atomic_init(&atomic, init_val);

    for (uint32_t i = 0; i < init_val; ++i) {
        int32_t const curr_value = atomic_read(&atomic);
        bool const res = atomic_dec_and_test(&atomic);
        TEST_ASSERT(res == (curr_value == 1));
        int32_t const new_value = atomic_read(&atomic);
        TEST_ASSERT(new_value == curr_value - 1);
    }
    return true;
}

DECLARE_PER_CPU(bool, atomic_do_and_test_result);
static void _atomic_do_dec_and_test(void * arg) {
    atomic_t * const atomic = arg;
    bool const res = atomic_dec_and_test(atomic);
    this_cpu_var(atomic_do_and_test_result) = res;
    this_cpu_var(atomic_test_helper_done) = true;
}

static bool atomic_dec_and_test_stress_test(void) {
    uint8_t const ncpus = acpi_get_number_cpus();

    atomic_t atomic;
    atomic_init(&atomic, ncpus - 1);

    uint8_t const this_cpu = this_cpu_var(cpu_id);
    for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
        cpu_var(atomic_test_helper_done, cpu) = (cpu == this_cpu)?true : false;
    }

    struct remote_call_t const rem_call = {
        .func = _atomic_do_dec_and_test,
        .arg = &atomic,
    };
    broadcast_remote_call(&rem_call);

    uint32_t const steps = 0;
    uint32_t const max_steps = 50;
    bool success = false;
    while (!success && (steps < max_steps)) {
        success = true;
        for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
            bool const done = cpu_var(atomic_test_helper_done, cpu);
            if (!done) {
                success = false;
                break;
            }
        }
        lapic_sleep(10);
    }
    if (steps == max_steps) {
        // Timed out while waiting for all cpus to complete their task.
        return false;
    } else {
        // Make sure that only a single cpu got `true` from atomic_dec_and_test.
        bool foundTrue = false;
        for (uint8_t cpu = 0; cpu < ncpus; ++cpu) {
            if (cpu != this_cpu) {
                bool const res = cpu_var(atomic_do_and_test_result, cpu);
                if (res) {
                    // This cpu got `true` when calling atomic_dec_and_test on
                    // the atomic_t.
                    if (foundTrue) {
                        // If foundTrue is true, that means that two different
                        // cpus got `true` when calling atomic_dec_and_test.
                        // This should not happen.
                        return false;
                    } else {
                        foundTrue = true;
                    }
                }
            }
        }
        // We expect exactly one true from all the calls to atomic_dec_and_test.
        return foundTrue && (atomic_read(&atomic) == 0);
    }
}

void atomic_test(void) {
    TEST_FWK_RUN(atomic_add_stress_test);
    TEST_FWK_RUN(atomic_fetch_and_add_basic_test);
    TEST_FWK_RUN(atomic_fetch_and_add_stress_test);
    TEST_FWK_RUN(atomic_dec_and_test_basic_test);
    TEST_FWK_RUN(atomic_dec_and_test_stress_test);
}
