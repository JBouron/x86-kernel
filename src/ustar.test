#include <test.h>
#include <memdisk.h>
#include <memory.h>

uint8_t ARCHIVE[] = {
  0x72, 0x6F, 0x6F, 0x74, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x37, 0x35, 0x35, 0x00,
  0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x31,
  0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x00, 0x31, 0x33, 0x36, 0x37, 0x30, 0x35, 0x31, 0x37,
  0x30, 0x37, 0x30, 0x00, 0x30, 0x31, 0x32, 0x33, 0x36, 0x35, 0x00, 0x20,
  0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x73, 0x74, 0x61, 0x72, 0x00, 0x30,
  0x30, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x65, 0x74,
  0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6F, 0x74,
  0x2F, 0x64, 0x69, 0x72, 0x31, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x30, 0x30, 0x30, 0x37, 0x35, 0x35, 0x00, 0x30, 0x30, 0x30, 0x31,
  0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00,
  0x31, 0x33, 0x36, 0x37, 0x30, 0x35, 0x32, 0x36, 0x31, 0x33, 0x36, 0x00,
  0x30, 0x31, 0x33, 0x32, 0x32, 0x37, 0x00, 0x20, 0x35, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x75, 0x73, 0x74, 0x61, 0x72, 0x00, 0x30, 0x30, 0x6B, 0x65, 0x74,
  0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x57, 0x68, 0x61, 0x74, 0x4B, 0x69, 0x6E, 0x64,
  0x4F, 0x66, 0x46, 0x69, 0x6C, 0x65, 0x49, 0x73, 0x54, 0x68, 0x69, 0x73,
  0x49, 0x4D, 0x65, 0x61, 0x6E, 0x4C, 0x6F, 0x6F, 0x6B, 0x41, 0x74, 0x54,
  0x68, 0x65, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x4F, 0x66, 0x54, 0x68,
  0x65, 0x46, 0x69, 0x6C, 0x65, 0x6E, 0x61, 0x6D, 0x65, 0x49, 0x6E, 0x54,
  0x68, 0x69, 0x73, 0x53, 0x68, 0x69, 0x74, 0x49, 0x73, 0x49, 0x74, 0x45,
  0x76, 0x65, 0x6E, 0x53, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62,
  0x63, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30,
  0x36, 0x34, 0x34, 0x00, 0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00,
  0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x00, 0x31, 0x33, 0x36, 0x37,
  0x30, 0x35, 0x32, 0x35, 0x34, 0x34, 0x37, 0x00, 0x30, 0x33, 0x34, 0x33,
  0x34, 0x36, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x73, 0x74,
  0x61, 0x72, 0x00, 0x30, 0x30, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x00, 0x72, 0x6F, 0x6F, 0x74, 0x2F, 0x64, 0x69, 0x72, 0x31, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x6F, 0x6F, 0x74,
  0x2F, 0x64, 0x69, 0x72, 0x31, 0x2F, 0x66, 0x69, 0x6C, 0x65, 0x31, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0x30, 0x30, 0x30, 0x36, 0x34, 0x34, 0x00, 0x30, 0x30, 0x30, 0x31,
  0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x33, 0x00,
  0x31, 0x33, 0x36, 0x37, 0x30, 0x35, 0x31, 0x36, 0x36, 0x31, 0x34, 0x00,
  0x30, 0x31, 0x34, 0x31, 0x34, 0x34, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x75, 0x73, 0x74, 0x61, 0x72, 0x00, 0x30, 0x30, 0x6B, 0x65, 0x74,
  0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
  0x39, 0x30, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x72, 0x6F, 0x6F, 0x74, 0x2F, 0x66, 0x69, 0x6C, 0x65, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x36, 0x34, 0x34, 0x00,
  0x30, 0x30, 0x30, 0x31, 0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x31,
  0x37, 0x35, 0x30, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
  0x30, 0x36, 0x36, 0x00, 0x31, 0x33, 0x36, 0x37, 0x30, 0x35, 0x31, 0x37,
  0x30, 0x37, 0x30, 0x00, 0x30, 0x31, 0x33, 0x33, 0x31, 0x33, 0x00, 0x20,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x73, 0x74, 0x61, 0x72, 0x00, 0x30,
  0x30, 0x6B, 0x65, 0x74, 0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x65, 0x74,
  0x7A, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
  0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x4D, 0x72, 0x72,
  0x70, 0x56, 0x34, 0x65, 0x71, 0x75, 0x47, 0x67, 0x37, 0x77, 0x2B, 0x63,
  0x59, 0x67, 0x64, 0x72, 0x71, 0x4F, 0x73, 0x68, 0x78, 0x4A, 0x6C, 0x77,
  0x46, 0x50, 0x39, 0x78, 0x35, 0x77, 0x76, 0x2B, 0x47, 0x62, 0x56, 0x36,
  0x6E, 0x57, 0x59, 0x59, 0x4B, 0x58, 0x2B, 0x65, 0x45, 0x49, 0x2F, 0x52,
  0x57, 0x49, 0x68, 0x4C, 0x79, 0x43, 0x47, 0x56, 0x71, 0x44, 0x55, 0x46,
  0x36, 0x66, 0x41, 0x4B, 0x4E, 0x42, 0x76, 0x4B, 0x61, 0x4D, 0x5A, 0x74,
  0x0A, 0x72, 0x4D, 0x59, 0x4F, 0x54, 0x79, 0x65, 0x41, 0x73, 0x51, 0x64,
  0x6C, 0x6D, 0x54, 0x63, 0x56, 0x48, 0x57, 0x55, 0x55, 0x4C, 0x31, 0x32,
  0x54, 0x79, 0x49, 0x36, 0x64, 0x52, 0x6C, 0x42, 0x75, 0x68, 0x5A, 0x42,
  0x61, 0x54, 0x34, 0x54, 0x78, 0x38, 0x6B, 0x6F, 0x6F, 0x71, 0x42, 0x74,
  0x6A, 0x75, 0x58, 0x2B, 0x68, 0x78, 0x6B, 0x67, 0x67, 0x38, 0x6E, 0x6B,
  0x37, 0x70, 0x5A, 0x61, 0x31, 0x70, 0x63, 0x6B, 0x6E, 0x42, 0x4B, 0x63,
  0x47, 0x56, 0x52, 0x48, 0x34, 0x0A, 0x32, 0x7A, 0x68, 0x4A, 0x39, 0x70,
  0x75, 0x43, 0x35, 0x31, 0x6E, 0x79, 0x68, 0x6E, 0x76, 0x77, 0x7A, 0x37,
  0x47, 0x6E, 0x31, 0x46, 0x62, 0x30, 0x67, 0x50, 0x77, 0x4A, 0x66, 0x37,
  0x31, 0x38, 0x37, 0x70, 0x73, 0x54, 0x58, 0x4C, 0x78, 0x4C, 0x65, 0x55,
  0x75, 0x6F, 0x2F, 0x31, 0x65, 0x55, 0x52, 0x72, 0x4C, 0x74, 0x58, 0x4B,
  0x77, 0x4E, 0x41, 0x6C, 0x49, 0x76, 0x67, 0x4C, 0x70, 0x69, 0x38, 0x39,
  0x5A, 0x36, 0x48, 0x70, 0x53, 0x51, 0x42, 0x43, 0x61, 0x7A, 0x0A, 0x36,
  0x37, 0x69, 0x37, 0x75, 0x63, 0x33, 0x6E, 0x30, 0x4A, 0x78, 0x56, 0x77,
  0x48, 0x38, 0x59, 0x42, 0x6F, 0x69, 0x37, 0x4E, 0x32, 0x78, 0x2F, 0x4B,
  0x46, 0x46, 0x6E, 0x75, 0x44, 0x56, 0x6E, 0x79, 0x53, 0x45, 0x48, 0x62,
  0x4E, 0x6B, 0x72, 0x73, 0x61, 0x2F, 0x67, 0x34, 0x71, 0x54, 0x4B, 0x74,
  0x68, 0x42, 0x66, 0x62, 0x58, 0x43, 0x47, 0x78, 0x62, 0x5A, 0x6B, 0x75,
  0x2F, 0x72, 0x72, 0x55, 0x66, 0x59, 0x36, 0x57, 0x57, 0x2F, 0x4F, 0x71,
  0x6D, 0x30, 0x6B, 0x0A, 0x44, 0x72, 0x36, 0x6F, 0x64, 0x50, 0x4B, 0x6E,
  0x6A, 0x47, 0x4E, 0x6A, 0x6E, 0x4D, 0x51, 0x37, 0x6E, 0x52, 0x4C, 0x63,
  0x32, 0x2B, 0x41, 0x56, 0x48, 0x49, 0x76, 0x57, 0x53, 0x37, 0x75, 0x38,
  0x73, 0x74, 0x70, 0x59, 0x57, 0x47, 0x49, 0x4E, 0x6B, 0x63, 0x59, 0x65,
  0x50, 0x5A, 0x7A, 0x4C, 0x39, 0x55, 0x4F, 0x6D, 0x2B, 0x4F, 0x32, 0x4F,
  0x42, 0x71, 0x66, 0x44, 0x45, 0x58, 0x74, 0x39, 0x57, 0x32, 0x53, 0x51,
  0x4B, 0x37, 0x42, 0x61, 0x54, 0x48, 0x57, 0x65, 0x0A, 0x69, 0x6A, 0x69,
  0x62, 0x68, 0x33, 0x5A, 0x59, 0x4D, 0x2F, 0x42, 0x34, 0x6F, 0x47, 0x4C,
  0x41, 0x52, 0x4C, 0x4D, 0x67, 0x32, 0x33, 0x70, 0x52, 0x71, 0x77, 0x35,
  0x38, 0x55, 0x49, 0x72, 0x71, 0x52, 0x76, 0x76, 0x69, 0x4F, 0x33, 0x6B,
  0x71, 0x77, 0x59, 0x36, 0x4F, 0x70, 0x70, 0x31, 0x2B, 0x6B, 0x62, 0x6B,
  0x6E, 0x51, 0x58, 0x69, 0x51, 0x6A, 0x4B, 0x6F, 0x47, 0x4A, 0x44, 0x4D,
  0x58, 0x49, 0x45, 0x45, 0x73, 0x69, 0x39, 0x75, 0x46, 0x48, 0x37, 0x4F,
  0x37, 0x0A, 0x6D, 0x41, 0x42, 0x59, 0x45, 0x7A, 0x30, 0x4C, 0x54, 0x32,
  0x68, 0x51, 0x2B, 0x57, 0x67, 0x56, 0x68, 0x62, 0x68, 0x64, 0x55, 0x4B,
  0x50, 0x62, 0x65, 0x41, 0x4F, 0x54, 0x57, 0x2B, 0x59, 0x55, 0x71, 0x4A,
  0x56, 0x64, 0x57, 0x57, 0x75, 0x6E, 0x57, 0x48, 0x50, 0x4F, 0x52, 0x52,
  0x64, 0x63, 0x4C, 0x43, 0x51, 0x7A, 0x68, 0x2F, 0x31, 0x65, 0x49, 0x79,
  0x6A, 0x74, 0x76, 0x34, 0x42, 0x37, 0x57, 0x67, 0x63, 0x4A, 0x59, 0x44,
  0x39, 0x6C, 0x58, 0x52, 0x6C, 0x64, 0x0A, 0x68, 0x4B, 0x53, 0x63, 0x4E,
  0x41, 0x45, 0x5A, 0x46, 0x4A, 0x78, 0x59, 0x34, 0x2B, 0x62, 0x63, 0x2F,
  0x45, 0x69, 0x4A, 0x69, 0x43, 0x31, 0x6E, 0x69, 0x2B, 0x4D, 0x71, 0x52,
  0x62, 0x39, 0x48, 0x71, 0x4B, 0x39, 0x42, 0x4A, 0x78, 0x4E, 0x55, 0x48,
  0x59, 0x5A, 0x38, 0x53, 0x4B, 0x6A, 0x64, 0x30, 0x66, 0x5A, 0x63, 0x77,
  0x4A, 0x37, 0x6A, 0x32, 0x37, 0x55, 0x2B, 0x45, 0x34, 0x66, 0x6A, 0x6A,
  0x64, 0x71, 0x6C, 0x4B, 0x65, 0x52, 0x67, 0x43, 0x51, 0x5A, 0x54, 0x0A,
  0x4E, 0x39, 0x35, 0x61, 0x74, 0x39, 0x4E, 0x77, 0x74, 0x65, 0x37, 0x74,
  0x45, 0x62, 0x53, 0x50, 0x37, 0x72, 0x34, 0x51, 0x6D, 0x46, 0x77, 0x44,
  0x78, 0x47, 0x51, 0x34, 0x58, 0x53, 0x56, 0x63, 0x37, 0x53, 0x51, 0x52,
  0x53, 0x63, 0x72, 0x5A, 0x47, 0x45, 0x39, 0x69, 0x75, 0x4B, 0x4B, 0x73,
  0x49, 0x70, 0x48, 0x79, 0x7A, 0x6D, 0x4F, 0x64, 0x39, 0x51, 0x61, 0x6A,
  0x59, 0x42, 0x61, 0x56, 0x68, 0x76, 0x6E, 0x34, 0x2F, 0x39, 0x50, 0x74,
  0x35, 0x75, 0x4F, 0x4C, 0x0A, 0x69, 0x59, 0x35, 0x2B, 0x6E, 0x68, 0x63,
  0x31, 0x6F, 0x50, 0x5A, 0x77, 0x57, 0x6B, 0x66, 0x71, 0x62, 0x68, 0x47,
  0x70, 0x4B, 0x6B, 0x52, 0x46, 0x4B, 0x63, 0x52, 0x2F, 0x78, 0x42, 0x68,
  0x58, 0x53, 0x48, 0x35, 0x70, 0x63, 0x59, 0x47, 0x67, 0x6B, 0x48, 0x48,
  0x72, 0x69, 0x70, 0x54, 0x46, 0x53, 0x44, 0x43, 0x46, 0x51, 0x68, 0x35,
  0x75, 0x6F, 0x6F, 0x58, 0x63, 0x77, 0x4F, 0x79, 0x62, 0x31, 0x62, 0x4E,
  0x32, 0x49, 0x4C, 0x52, 0x58, 0x51, 0x56, 0x78, 0x61, 0x0A, 0x61, 0x6E,
  0x37, 0x71, 0x51, 0x39, 0x57, 0x57, 0x36, 0x50, 0x6E, 0x5A, 0x4D, 0x72,
  0x78, 0x61, 0x38, 0x42, 0x79, 0x54, 0x35, 0x69, 0x68, 0x46, 0x77, 0x6C,
  0x2F, 0x74, 0x44, 0x45, 0x5A, 0x33, 0x47, 0x55, 0x48, 0x37, 0x7A, 0x57,
  0x41, 0x32, 0x6C, 0x66, 0x50, 0x4A, 0x6D, 0x50, 0x36, 0x38, 0x33, 0x66,
  0x49, 0x5A, 0x72, 0x79, 0x2B, 0x64, 0x37, 0x77, 0x71, 0x2B, 0x6B, 0x52,
  0x44, 0x4A, 0x66, 0x68, 0x73, 0x4E, 0x76, 0x30, 0x4C, 0x59, 0x32, 0x74,
  0x2B, 0x44, 0x0A, 0x55, 0x6A, 0x39, 0x59, 0x4F, 0x4C, 0x41, 0x64, 0x64,
  0x59, 0x47, 0x53, 0x31, 0x51, 0x6A, 0x67, 0x50, 0x57, 0x43, 0x48, 0x51,
  0x6B, 0x55, 0x37, 0x53, 0x6A, 0x72, 0x53, 0x67, 0x66, 0x6F, 0x4C, 0x57,
  0x35, 0x36, 0x6D, 0x38, 0x6F, 0x6E, 0x2B, 0x74, 0x66, 0x57, 0x39, 0x7A,
  0x33, 0x58, 0x74, 0x6A, 0x34, 0x6E, 0x49, 0x41, 0x54, 0x37, 0x37, 0x48,
  0x6E, 0x56, 0x44, 0x45, 0x64, 0x7A, 0x6C, 0x52, 0x65, 0x72, 0x4C, 0x38,
  0x4C, 0x52, 0x37, 0x4D, 0x58, 0x4F, 0x6C, 0x0A, 0x31, 0x35, 0x58, 0x6F,
  0x36, 0x44, 0x72, 0x76, 0x6F, 0x65, 0x51, 0x45, 0x53, 0x34, 0x70, 0x61,
  0x63, 0x41, 0x58, 0x45, 0x2F, 0x30, 0x38, 0x6F, 0x77, 0x38, 0x6B, 0x77,
  0x44, 0x77, 0x4C, 0x37, 0x73, 0x43, 0x34, 0x39, 0x4C, 0x41, 0x58, 0x45,
  0x46, 0x68, 0x2F, 0x63, 0x51, 0x34, 0x33, 0x4C, 0x74, 0x53, 0x6A, 0x6A,
  0x57, 0x78, 0x4D, 0x73, 0x65, 0x6F, 0x58, 0x65, 0x76, 0x61, 0x46, 0x31,
  0x6D, 0x41, 0x67, 0x6C, 0x72, 0x67, 0x6C, 0x31, 0x73, 0x46, 0x71, 0x63,
  0x0A, 0x67, 0x48, 0x5A, 0x49, 0x65, 0x79, 0x65, 0x52, 0x42, 0x34, 0x69,
  0x41, 0x56, 0x37, 0x4A, 0x49, 0x44, 0x6C, 0x32, 0x43, 0x75, 0x48, 0x56,
  0x54, 0x79, 0x56, 0x2B, 0x78, 0x33, 0x2F, 0x57, 0x75, 0x72, 0x62, 0x43,
  0x62, 0x47, 0x32, 0x6B, 0x61, 0x38, 0x54, 0x6D, 0x32, 0x31, 0x6D, 0x6B,
  0x65, 0x6A, 0x79, 0x78, 0x33, 0x44, 0x4D, 0x52, 0x71, 0x44, 0x61, 0x37,
  0x4B, 0x61, 0x54, 0x66, 0x46, 0x62, 0x54, 0x51, 0x35, 0x42, 0x30, 0x76,
  0x79, 0x46, 0x58, 0x4D, 0x6C, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
size_t const ARCHIVE_SIZE = 6144;

// The array above describes the following archive:
//
//Offset 0x0 : USTAR header:
//  filename            = root/
//  file_mode           = 0000755
//  user_id             = 0001750
//  group_id            = 0001750
//  filesize            = 00000000000 (0)
//  last_mod_time       = 13670517070
//  checksum            = 0x2000353633323130
//  type                = 5
//  linked_file_name    = 
//  indicator           = ustar
//  version             = 00ketza
//  owner_username      = ketza
//  owner_groupname     = ketza
//  device_major_number = 0x0030303030303030
//  device_minor_number = 0x0030303030303030
//  filename_prefix     = 
//Offset 0x200 : USTAR header:
//  filename            = root/dir1/
//  file_mode           = 0000755
//  user_id             = 0001750
//  group_id            = 0001750
//  filesize            = 00000000000 (0)
//  last_mod_time       = 13670526136
//  checksum            = 0x2000373232333130
//  type                = 5
//  linked_file_name    = 
//  indicator           = ustar
//  version             = 00ketza
//  owner_username      = ketza
//  owner_groupname     = ketza
//  device_major_number = 0x0030303030303030
//  device_minor_number = 0x0030303030303030
//  filename_prefix     = 
//Offset 0x400 : USTAR header:
//  filename            = WhatKindOfFileIsThisIMeanLookAtTheLengthOfThe...
//                        ...FilenameInThisShitIsItEvenSupported0123456789abcd
//  file_mode           = 0000644
//  user_id             = 0001750
//  group_id            = 0001750
//  filesize            = 00000000006 (6)
//  last_mod_time       = 13670525447
//  checksum            = 0x2000363433343330
//  type                = 0
//  linked_file_name    = 
//  indicator           = ustar
//  version             = 00ketza
//  owner_username      = ketza
//  owner_groupname     = ketza
//  device_major_number = 0x0030303030303030
//  device_minor_number = 0x0030303030303030
//  filename_prefix     = root/dir1
//Offset 0x600 : DATA BLOCK
//Offset 0x800 : USTAR header:
//  filename            = root/dir1/file1
//  file_mode           = 0000644
//  user_id             = 0001750
//  group_id            = 0001750
//  filesize            = 00000000013 (11)
//  last_mod_time       = 13670516614
//  checksum            = 0x2000343431343130
//  type                = 0
//  linked_file_name    = 
//  indicator           = ustar
//  version             = 00ketza
//  owner_username      = ketza
//  owner_groupname     = ketza
//  device_major_number = 0x0030303030303030
//  device_minor_number = 0x0030303030303030
//  filename_prefix     = 
//Offset 0xA00 : DATA BLOCK
//Offset 0xC00 : USTAR header:
//  filename            = root/file0
//  file_mode           = 0000644
//  user_id             = 0001750
//  group_id            = 0001750
//  filesize            = 00000002066 (1078)
//  last_mod_time       = 13670517070
//  checksum            = 0x2000333133333130
//  type                = 0
//  linked_file_name    = 
//  indicator           = ustar
//  version             = 00ketza
//  owner_username      = ketza
//  owner_groupname     = ketza
//  device_major_number = 0x0030303030303030
//  device_minor_number = 0x0030303030303030
//  filename_prefix     = 
//Offset 0xE00 : DATA BLOCK
//Offset 0x1000 : DATA BLOCK
//Offset 0x1200 : DATA BLOCK
//Offset 0x1400 : USTAR header:
//  filename            = 
//  file_mode           = 
//  user_id             = 
//  group_id            = 
//  filesize            =  (0)
//  last_mod_time       = 
//  checksum            = 0x0000000000000000
//  type                = 
//  linked_file_name    = 
//  indicator           = 
//  version             = 
//  owner_username      = 
//  owner_groupname     = 
//  device_major_number = 0x0000000000000000
//  device_minor_number = 0x0000000000000000
//  filename_prefix     = 
//Offset 0x1600 : USTAR header:
//  filename            = 
//  file_mode           = 
//  user_id             = 
//  group_id            = 
//  filesize            =  (0)
//  last_mod_time       = 
//  checksum            = 0x0000000000000000
//  type                = 
//  linked_file_name    = 
//  indicator           = 
//  version             = 
//  owner_username      = 
//  owner_groupname     = 
//  device_major_number = 0x0000000000000000
//  device_minor_number = 0x0000000000000000
//  filename_prefix     = 


// Create the test memdisk on the archive.
static struct disk *create_test_disk(void) {
    return create_memdisk(ARCHIVE, ARCHIVE_SIZE, false);
}

static bool ustar_octal_string_to_u64_test(void) {
    TEST_ASSERT(octal_string_to_u64("235") == 0235ULL);
    TEST_ASSERT(octal_string_to_u64("5672") == 05672ULL);
    TEST_ASSERT(octal_string_to_u64("334") == 0334ULL);
    TEST_ASSERT(octal_string_to_u64("457567") == 0457567ULL);
    return true;
}

static bool ustar_read_header_test(void) {
    struct disk * const disk = create_test_disk();
    size_t const num_headers = 5;
    off_t const offsets[] = { 0x0, 0x200, 0x400, 0x800, 0xC00 };

    struct ustar_header header;
    for (uint8_t i = 0; i < num_headers; ++i) {
        TEST_ASSERT(read_header(disk, offsets[i], &header));
        TEST_ASSERT(memeq(&header, ARCHIVE + offsets[i], sizeof(header)));
    }
    delete_memdisk(disk);
    return true;
}

static bool ustar_find_file_test(void) {
    struct disk * const disk = create_test_disk();
    size_t const num_files = 5;

    // find_file does not care about the type field in the header. This means we
    // can use it to find directories. For now this is fine.
    char const *filenames[] = {
        "root/",
        "root/dir1/",
        "root/dir1/WhatKindOfFileIsThisIMeanLookAtTheLengthOfTheFilenameIn" 
            "ThisShitIsItEvenSupported0123456789abcd",
        "root/dir1/file1",
        "root/file0",
    };
    off_t const offsets[] = { 0x0, 0x200, 0x400, 0x800, 0xC00 };

    for (uint8_t i = 0; i < num_files; ++i) {
        uint32_t offset = -1UL;
        TEST_ASSERT(find_file(disk, filenames[i], &offset));
        TEST_ASSERT(offset == offsets[i]);
    }

    // Test the case where the files are non existing.
    // The value of the offset poitner should never change if the file is not
    // found.
    uint32_t offset = 0xDEADBEEF;
    uint32_t const exp_offset = 0xDEADBEEF;

    TEST_ASSERT(!find_file(disk, "LOFOFORA", &offset));
    TEST_ASSERT(offset == exp_offset);

    delete_memdisk(disk);
    return true;
}

static bool ustar_create_file_test(void) {
    struct disk * const disk = create_test_disk();
    struct file * const file = ustar_create_file(disk, "TAGADA");
    delete_memdisk(disk);
    return file == NO_FILE;
}

static bool ustar_open_file_test(void) {
    struct disk * const disk = create_test_disk();
    size_t const num_files = 5;

    // find_file does not care about the type field in the header. This means we
    // can use it to find directories. For now this is fine.
    char const *filenames[] = {
        "root/",
        "root/dir1/",
        "root/dir1/WhatKindOfFileIsThisIMeanLookAtTheLengthOfTheFilenameIn"
            "ThisShitIsItEvenSupported0123456789abcd",
        "root/dir1/file1",
        "root/file0",
    };
    off_t const offsets[] = { 0x0, 0x200, 0x400, 0x800, 0xC00 };

    for (uint8_t i = 0; i < num_files; ++i) {
        struct file * const file = ustar_open_file(disk, filenames[i]);
        TEST_ASSERT(file != NO_FILE);

        TEST_ASSERT(streq(file->path, filenames[i]));
        TEST_ASSERT(file->disk == disk);
        TEST_ASSERT(file->ops == &ustar_file_ops);

        struct ustar_file_private_data * const data = file->fs_private;
        TEST_ASSERT(data);
        TEST_ASSERT(data->header_offset == offsets[i]);
        TEST_ASSERT(memeq(&data->header,
                          ARCHIVE + offsets[i],
                          sizeof(data->header)));
        ustar_close_file(file);
    }
    TEST_ASSERT(ustar_open_file(disk, "MEMES") == NO_FILE);
    delete_memdisk(disk);
    return true;
}

static bool ustar_read_file_test(void) {
    struct disk * const disk = create_test_disk();
    size_t const num_files = 4;

    char const *filenames[] = {
        "root/dir1/WhatKindOfFileIsThisIMeanLookAtTheLengthOfTheFilenameIn"
            "ThisShitIsItEvenSupported0123456789abcd",
        "root/dir1/file1",
        "root/file0",
        // Use a directory as an empty file. This is fine because find_file()
        // does not care if the requested path is a file or a dir.
        "root/dir1/",
    };

    for (uint8_t i = 0; i < num_files; ++i) {
        struct file * const file = ustar_open_file(disk, filenames[i]);
        TEST_ASSERT(file != NO_FILE);

        struct ustar_file_private_data * const data = file->fs_private;
        size_t const filesize = octal_string_to_u64(data->header.filesize);

        uint8_t * const buf = kmalloc(filesize + 10);

        // Try to read any size from 0 to something bigger than the file itself.
        for (size_t size = 0; size < filesize + 10; ++size) {
            // Try to read at any offset including beyond the end of the file.
            for (off_t offset = 0; offset < filesize + 10; ++offset) {
                size_t const read = ustar_read(file, offset, buf, size);
                size_t exp_read;
                if (offset >= filesize) {
                    // We tried reading beyond the file. This should return 0.
                    exp_read = 0;
                } else {
                    // We should not read beyond the end of the file.
                    exp_read = min_u32(filesize - offset, size);
                }
                TEST_ASSERT(read == exp_read);

                // Now check that we have read the correct data.
                uint8_t const * const raw = ARCHIVE + data->header_offset +
                    sizeof(struct ustar_header) + offset;
                TEST_ASSERT(memeq(buf, raw, read));
            }
        }
        kfree(buf);
        ustar_close_file(file);
    }
    delete_memdisk(disk);
    return true;
}

static void fill_buf(uint8_t * const buf, size_t const len) {
    for (size_t i = 0; i < len; ++i) {
        // Use the TSC to generate a """random""" value.
        uint8_t const val = read_tsc() & 0xFF; 
        buf[i] = val;
    }
}

static bool ustar_write_file_test(void) {
    struct disk * const disk = create_test_disk();
    size_t const num_files = 3;

    char const *filenames[] = {
        "root/dir1/WhatKindOfFileIsThisIMeanLookAtTheLengthOfTheFilenameIn"
            "ThisShitIsItEvenSupported0123456789abcd",
        "root/dir1/file1",
        "root/file0",
    };

    for (uint8_t i = 0; i < num_files; ++i) {
        struct file * const file = ustar_open_file(disk, filenames[i]);
        TEST_ASSERT(file != NO_FILE);

        struct ustar_file_private_data * const data = file->fs_private;
        size_t const filesize = octal_string_to_u64(data->header.filesize);

        // Copy the entire content of the file into a buffer `filedata`. This
        // buffer will be used to make sure that the ustar_write() wrote the
        // buffer at the right location and only the number of bytes requested.
        uint8_t * const filedata = kmalloc(filesize);
        memcpy(filedata,
               ARCHIVE + data->header_offset + sizeof(struct ustar_header),
               filesize);

        // Try to write any size from 0 to something bigger than the file
        // itself.
        for (size_t size = 0; size < filesize + 10; ++size) {
            // Try to write at any offset including beyond the end of the file.
            for (off_t offset = 0; offset < filesize + 10; ++offset) {
                // Prepare the buffer that will be written to the file.
                uint8_t * const buf = kmalloc(size);
                fill_buf(buf, size);

                size_t const written = ustar_write(file, offset, buf, size);
                size_t exp_written;
                if (offset >= filesize) {
                    // We tried writting beyond the file. This should return 0.
                    exp_written = 0;
                } else {
                    // We should not write beyond the end of the file.
                    exp_written = min_u32(filesize - offset, size);

                    // Update the copy of the file content.
                    memcpy(filedata + offset, buf, written);
                }
                TEST_ASSERT(written == exp_written);

                // Now check that the correct data was written by comparing the
                // raw file content (in ARCHIVE/memdisk) and filedata.
                uint8_t const * const raw = ARCHIVE + data->header_offset +
                    sizeof(struct ustar_header);
                TEST_ASSERT(memeq(filedata, raw, written));
                kfree(buf);
            }
        }
        kfree(filedata);
        ustar_close_file(file);
    }
    delete_memdisk(disk);
    return true;
}

void ustar_test(void) {
    TEST_FWK_RUN(ustar_octal_string_to_u64_test);
    TEST_FWK_RUN(ustar_read_header_test);
    TEST_FWK_RUN(ustar_find_file_test);
    TEST_FWK_RUN(ustar_create_file_test);
    TEST_FWK_RUN(ustar_open_file_test);
    TEST_FWK_RUN(ustar_read_file_test);
    TEST_FWK_RUN(ustar_write_file_test);
}
