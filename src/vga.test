#include <test.h>

// Setup a fake VGA buffer with a custom width and height.
#define VGA_TEST_SETUP(bufname, width, height)   \
    uint16_t bufname[width*height];     \
    VGA_WIDTH = width;                  \
    VGA_HEIGHT = height;                \
    uint8_t const __old_cx = cursor_x;  \
    uint8_t const __old_cy = cursor_y;  \
    cursor_x = 0;                       \
    cursor_y = 0;                       \
    vga_set_buffer_addr(bufname);

// Reset the actual VGA matrix to the default address.
#define VGA_TEST_TEARDOWN()                                     \
    vga_set_buffer_addr((uint16_t*)VGA_DEFAULT_MATRIX_ADDR);    \
    VGA_WIDTH = 80;                                             \
    VGA_HEIGHT = 25;                                            \
    cursor_x = __old_cx;                                        \
    cursor_y = __old_cy;

// Basic test checking the encoding of a certain glyph with a combination of
// foreground and backgroud color.
static bool vga_basic_char_test(void) {
    char const chr = 'L';
    enum color_t const fg = LIGHT_GREEN;
    enum color_t const bg = RED;
    color_desc_t const color = create_color_desc(fg, bg);

    char_t const vga_char = create_char(chr, color);
    uint16_t const bits = (uint16_t)vga_char;

    // The expected format for a VGA character inside the matrix is a 16bits
    // word:
    // MSB                      LSB
    // |  bg  |  fg  |    char    |
    uint16_t const expected = (bg << 12) | (fg << 8) | chr;
    return bits == expected;
}

// Simple test in which a char is put at certain coordinates in the VGA matrix.
static bool vga_put_char_at(void) {
    // Create a fake VGA matrix of 4 by 4 elements.
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Use a simple grey on black color scheme.
    color_desc_t const color = create_color_desc(LIGHT_GREY, BLACK);

    // Put a few chars. The final pattern should look like:
    // + - - - - +
    // | a       |  a at (0;0)
    // |     c b |  b at (3;1)
    // |         |  c at (2;1)
    // |   d     |  d at (1;3)
    // + - - - - +
    put_char_at(create_char('a', color), 0, 0);
    put_char_at(create_char('b', color), 3, 1);
    put_char_at(create_char('c', color), 2, 1);
    put_char_at(create_char('d', color), 1, 3);

    // Check the matrix.
    // This is what an empty cell should look like.
    char_t const empty = create_char('\0', create_color_desc(BLACK, BLACK));
    for (uint8_t x = 0; x < VGA_WIDTH; ++x) {
        for (uint8_t y = 0; y < VGA_HEIGHT; ++y) {
            // Compute the expected char. If the cell is supposed to be empty
            // then use '\0'.
            char expected_char = '\0';
            if (!x && !y) {
                expected_char = 'a';
            } else if (x == 3 && y == 1) {
                expected_char = 'b';
            } else if (x == 2 && y == 1) {
                expected_char = 'c';
            } else if (x == 1 && y == 3) {
                expected_char = 'd';
            }

            // The current value as read in the matrix.
            char_t const cell = fake[y * 4 + x];
            // The expected value of the cell.
            char_t const expected_cell = expected_char ?
                create_char(expected_char, color) : empty;

            if (cell != expected_cell) {
                goto fail;
            }
        }
    }
    // This was a success.
    VGA_TEST_TEARDOWN();
    return true;
fail:
    // Something happened.
    VGA_TEST_TEARDOWN();
    return false;
}

// Try to put a char at a x coordinate that is >= VGA_WIDTH. The expected result
// is that the char is not printed and discarded. Do the same with y >=
// VGA_HEIGHT.
static bool vga_put_char_at_out_of_bounds(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Use a simple grey on black color scheme.
    color_desc_t const color = create_color_desc(LIGHT_GREY, BLACK);
    char_t const ch = create_char('L', color);

    // Trick the code by setting VGA_HEIGHT = 3. Doing so we can test the case y
    // >= VGA_HEIGHT.
    VGA_HEIGHT = 3;
    put_char_at(ch, 4, 0);
    put_char_at(ch, 0, 4);
    VGA_HEIGHT = 4;

    // Check that the matrix did not change after printing the character out of
    // bounds.
    for (uint8_t x = 0; x < VGA_WIDTH; ++x) {
        for (uint8_t y = 0; y < VGA_HEIGHT; ++y) {
            char_t const cell = fake[y * 4 + x];
            if (cell) {
                goto fail;
            }
        }
    }
    // This was a success.
    VGA_TEST_TEARDOWN();
    return true;
fail:
    // Something happened.
    VGA_TEST_TEARDOWN();
    return false;
}

// Check the behavior when clearing the VGA matrix.
static bool vga_clear_matrix(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Write garbage in the matrix.
    memset((uint8_t*)fake, 0xFF, VGA_WIDTH * VGA_HEIGHT * 2);
    clear_matrix();
    VGA_TEST_TEARDOWN();
    for (uint8_t x = 0; x < 4; ++x) {
        for (uint8_t y = 0; y < 4; ++y) {
            char_t const cell = fake[y * 4 + x];
            if (cell) {
                return false;
            }
        }
    }
    return true;
}

// Test the scroll up functionality of the VGA matrix.
static bool vga_scroll_up(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Fill the matrix as follows:
    //  a a a a
    //  b b b b
    //  c c c c
    //  d d d d
    // Then scroll up and check that we have:
    //  b b b b
    //  c c c c
    //  d d d d
    //  . . . . <- blank line.
    color_desc_t const color = create_color_desc(LIGHT_GREY, BLACK);
    for (uint8_t x = 0; x < VGA_WIDTH; ++x) {
        for (uint8_t y = 0; y < VGA_HEIGHT; ++y) {
            uint32_t const idx = y * 4 + x;
            char_t const chr = create_char('a' + y, color);
            fake[idx] = chr;
        }
    }
    scroll_up();
    for (uint8_t x = 0; x < VGA_WIDTH; ++x) {
        for (uint8_t y = 0; y < VGA_HEIGHT-1; ++y) {
            uint32_t const idx = y * 4 + x;
            char_t const current = fake[idx];
            char_t const expected = create_char('a' + y + 1, color);
            if (current != expected) {
                goto fail;
            }
        }
    }
    // Last line should be blank.
    for (uint8_t x = 0; x < VGA_WIDTH; ++x) {
        uint32_t const idx = (VGA_HEIGHT - 1) * 4 + x;
        if (fake[idx]) {
            goto fail;
        }
    }
    // This was a success.
    VGA_TEST_TEARDOWN();
    return true;
fail:
    // Something happened.
    VGA_TEST_TEARDOWN();
    return false;
}

// Test checking that the VGA output stream handles newline characters.
static bool vga_out_stream_newline(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Write a string containing new lines in the VGA output stream.
    char const * const str = "Hel\nlo\nWor\nld";
    VGA_STREAM.write((uint8_t const *)str, 13);
    VGA_TEST_TEARDOWN();
    // The expected output is as follows:
    //  H e l .
    //  l o . .
    //  W o r .
    //  l d . .
    color_desc_t const c = create_color_desc(LIGHT_GREY, BLACK);
    color_desc_t const e = create_color_desc(BLACK, BLACK);
    return fake[0] == create_char('H', c) &&
        fake[1] == create_char('e', c) &&
        fake[2] == create_char('l', c) &&
        fake[3] == create_char('\0', e) &&
        fake[4] == create_char('l', c) &&
        fake[5] == create_char('o', c) &&
        fake[6] == create_char('\0', e) &&
        fake[7] == create_char('\0', e) &&
        fake[8] == create_char('W', c) &&
        fake[9] == create_char('o', c) &&
        fake[10] == create_char('r', c) &&
        fake[11] == create_char('\0', e) &&
        fake[12] == create_char('l', c) &&
        fake[13] == create_char('d', c) &&
        fake[14] == create_char('\0', e) &&
        fake[15] == create_char('\0', e);
}

// Check that outputing too many new lines eventually triggers a scoll up.
static bool vga_out_stream_newline_trigger_scrollup(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Write a string containing new lines in the VGA output stream.
    char const * const str = "Hel\nlo\nWo\nr\nld";
    VGA_STREAM.write((uint8_t const *)str, 14);
    VGA_TEST_TEARDOWN();
    // The expected output is as follows:
    //  l o . .
    //  W o . .
    //  r . . .
    //  l d . .
    color_desc_t const c = create_color_desc(LIGHT_GREY, BLACK);
    color_desc_t const e = create_color_desc(BLACK, BLACK);
    return fake[0] == create_char('l', c) &&
        fake[1] == create_char('o', c) &&
        fake[2] == create_char('\0', e) &&
        fake[3] == create_char('\0', e) &&
        fake[4] == create_char('W', c) &&
        fake[5] == create_char('o', c) &&
        fake[6] == create_char('\0', e) &&
        fake[7] == create_char('\0', e) &&
        fake[8] == create_char('r', c) &&
        fake[9] == create_char('\0', e) &&
        fake[10] == create_char('\0', e) &&
        fake[11] == create_char('\0', e) &&
        fake[12] == create_char('l', c) &&
        fake[13] == create_char('d', c) &&
        fake[14] == create_char('\0', e) &&
        fake[15] == create_char('\0', e);
}

// Check the behavior when outputing strings that have the exact line length.
static bool vga_out_stream_exact_line_length(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Write a string containing new lines in the VGA output stream.
    char const * const str = "DOOM\nHalo\nSCII\nSCBW";
    VGA_STREAM.write((uint8_t const *)str, 19);
    VGA_TEST_TEARDOWN();
    // The expected output is as follows:
    //  D O O M
    //  H a l o
    //  S C I I
    //  S C B W
    // No scroll up and no newline (since each line is the exact width of the
    // matrix).
    color_desc_t const c = create_color_desc(LIGHT_GREY, BLACK);
    return fake[0] == create_char('D', c) &&
        fake[1] == create_char('O', c) &&
        fake[2] == create_char('O', c) &&
        fake[3] == create_char('M', c) &&
        fake[4] == create_char('H', c) &&
        fake[5] == create_char('a', c) &&
        fake[6] == create_char('l', c) &&
        fake[7] == create_char('o', c) &&
        fake[8] == create_char('S', c) &&
        fake[9] == create_char('C', c) &&
        fake[10] == create_char('I', c) &&
        fake[11] == create_char('I', c) &&
        fake[12] == create_char('S', c) &&
        fake[13] == create_char('C', c) &&
        fake[14] == create_char('B', c) &&
        fake[15] == create_char('W', c);
}

// Check that lines that are too long are wrapped.
static bool vga_out_stream_line_wrap(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Write a string containing new lines in the VGA output stream.
    char const * const str = "Hello World";
    VGA_STREAM.write((uint8_t const *)str, 11);
    VGA_TEST_TEARDOWN();
    // The expected output is as follows:
    //  H e l l
    //  o   W o
    //  r l d .
    //  . . . .
    // No scroll up and no newline (since each line is the exact width of the
    // matrix).
    color_desc_t const c = create_color_desc(LIGHT_GREY, BLACK);
    color_desc_t const e = create_color_desc(BLACK, BLACK);
    return fake[0] == create_char('H', c) &&
        fake[1] == create_char('e', c) &&
        fake[2] == create_char('l', c) &&
        fake[3] == create_char('l', c) &&
        fake[4] == create_char('o', c) &&
        fake[5] == create_char(' ', c) &&
        fake[6] == create_char('W', c) &&
        fake[7] == create_char('o', c) &&
        fake[8] == create_char('r', c) &&
        fake[9] == create_char('l', c) &&
        fake[10] == create_char('d', c) &&
        fake[11] == create_char('\0', e) &&
        fake[12] == create_char('\0', e) &&
        fake[13] == create_char('\0', e) &&
        fake[14] == create_char('\0', e) &&
        fake[15] == create_char('\0', e);
}

// Wrtting a string so large that is wraps and scroll up.
static bool vga_out_stream_line_wrap_and_scroll(void) {
    VGA_TEST_SETUP(fake, 4, 4);
    // Zero the fake matrix.
    memzero((uint8_t*)fake, VGA_WIDTH * VGA_HEIGHT * 2);
    // Write a string containing new lines in the VGA output stream.
    char const * const str = "Hello World Kernel";
    VGA_STREAM.write((uint8_t const *)str, 18);
    VGA_TEST_TEARDOWN();
    // The expected output is as follows:
    //  o   W o
    //  r l d  
    //  K e r n
    //  e l . .
    // No scroll up and no newline (since each line is the exact width of the
    // matrix).
    color_desc_t const c = create_color_desc(LIGHT_GREY, BLACK);
    color_desc_t const e = create_color_desc(BLACK, BLACK);
    return fake[0] == create_char('o', c) &&
        fake[1] == create_char(' ', c) &&
        fake[2] == create_char('W', c) &&
        fake[3] == create_char('o', c) &&
        fake[4] == create_char('r', c) &&
        fake[5] == create_char('l', c) &&
        fake[6] == create_char('d', c) &&
        fake[7] == create_char(' ', c) &&
        fake[8] == create_char('K', c) &&
        fake[9] == create_char('e', c) &&
        fake[10] == create_char('r', c) &&
        fake[11] == create_char('n', c) &&
        fake[12] == create_char('e', c) &&
        fake[13] == create_char('l', c) &&
        fake[14] == create_char('\0', e) &&
        fake[15] == create_char('\0', e);
}

void vga_test(void) {
    TEST_FWK_RUN(vga_basic_char_test);
    TEST_FWK_RUN(vga_put_char_at);
    TEST_FWK_RUN(vga_put_char_at_out_of_bounds);
    TEST_FWK_RUN(vga_clear_matrix);
    TEST_FWK_RUN(vga_scroll_up);
    TEST_FWK_RUN(vga_out_stream_newline);
    TEST_FWK_RUN(vga_out_stream_newline_trigger_scrollup);
    TEST_FWK_RUN(vga_out_stream_exact_line_length);
    TEST_FWK_RUN(vga_out_stream_line_wrap);
    TEST_FWK_RUN(vga_out_stream_line_wrap_and_scroll);
}

#undef VGA_TEST_TEARDOWN
#undef VGA_TEST_SETUP
