#include <test.h>
#include <frame_alloc.h>

uint8_t const ELF_FILE_DATA[] = {
  0x7F, 0x45, 0x4C, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x74, 0x80, 0x04, 0x08, 0x34, 0x00, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x20, 0x00, 0x02, 0x00, 0x28, 0x00,
  0x0A, 0x00, 0x09, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x80, 0x04, 0x08, 0x00, 0x80, 0x04, 0x08, 0x58, 0x01, 0x00, 0x00,
  0x58, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x58, 0x91, 0x04, 0x08,
  0x58, 0x91, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x55, 0x89, 0xE5, 0x83,
  0xEC, 0x18, 0x83, 0xEC, 0x0C, 0x68, 0xFC, 0x80, 0x04, 0x08, 0xE8, 0x42,
  0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0x89, 0x45, 0xF4, 0xC7, 0x45, 0xF0,
  0x12, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xEC, 0x0D, 0x81, 0x04, 0x08, 0x83,
  0xEC, 0x04, 0xFF, 0x75, 0xF0, 0xFF, 0x75, 0xEC, 0xFF, 0x75, 0xF4, 0xE8,
  0x29, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0x89, 0x45, 0xE8, 0xA1, 0x58,
  0x91, 0x04, 0x08, 0x0F, 0xB6, 0xC0, 0x83, 0xEC, 0x0C, 0x50, 0xE8, 0x26,
  0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0x90, 0xC9, 0xC3, 0x8B, 0x5C, 0x24,
  0x04, 0xB8, 0x02, 0x00, 0x00, 0x00, 0xCD, 0x80, 0xC3, 0x8B, 0x5C, 0x24,
  0x04, 0x8B, 0x4C, 0x24, 0x08, 0x8B, 0x54, 0x24, 0x0C, 0xB8, 0x05, 0x00,
  0x00, 0x00, 0xCD, 0x80, 0xC3, 0x8B, 0x5C, 0x24, 0x04, 0xB8, 0x01, 0x00,
  0x00, 0x00, 0xCD, 0x80, 0xC3, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
  0x2F, 0x74, 0x65, 0x73, 0x74, 0x2F, 0x72, 0x6F, 0x6F, 0x74, 0x2F, 0x66,
  0x69, 0x6C, 0x65, 0x30, 0x00, 0x57, 0x65, 0x6C, 0x6C, 0x2C, 0x20, 0x68,
  0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x21, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A, 0x52, 0x00,
  0x01, 0x7C, 0x08, 0x01, 0x1B, 0x0C, 0x04, 0x04, 0x88, 0x01, 0x00, 0x00,
  0x1C, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x34, 0xFF, 0xFF, 0xFF,
  0x55, 0x00, 0x00, 0x00, 0x00, 0x41, 0x0E, 0x08, 0x85, 0x02, 0x42, 0x0D,
  0x05, 0x02, 0x51, 0xC5, 0x0C, 0x04, 0x04, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x47, 0x43, 0x43, 0x3A, 0x20, 0x28, 0x47, 0x4E, 0x55, 0x29, 0x20, 0x39,
  0x2E, 0x31, 0x2E, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x74, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x80, 0x04, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x81, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x58, 0x91, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x91, 0x04, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0xF1, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x60, 0x91, 0x04, 0x08,
  0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x58, 0x91, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x04, 0x00,
  0x21, 0x00, 0x00, 0x00, 0xD5, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x74, 0x80, 0x04, 0x08,
  0x55, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 0x27, 0x00, 0x00, 0x00,
  0x5C, 0x91, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x05, 0x00,
  0x33, 0x00, 0x00, 0x00, 0xF8, 0x80, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x02, 0x00, 0x44, 0x00, 0x00, 0x00, 0x5C, 0x91, 0x04, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00, 0x4B, 0x00, 0x00, 0x00,
  0xE0, 0x91, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x05, 0x00,
  0x50, 0x00, 0x00, 0x00, 0xE9, 0x80, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x01, 0x00, 0x55, 0x00, 0x00, 0x00, 0xC9, 0x80, 0x04, 0x08,
  0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x01, 0x00, 0x00, 0x6D, 0x61, 0x69,
  0x6E, 0x2E, 0x63, 0x00, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x5F, 0x61,
  0x72, 0x72, 0x61, 0x79, 0x00, 0x67, 0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x5F,
  0x72, 0x65, 0x61, 0x64, 0x5F, 0x77, 0x72, 0x69, 0x74, 0x65, 0x00, 0x5F,
  0x5F, 0x62, 0x73, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x67,
  0x6C, 0x6F, 0x62, 0x61, 0x6C, 0x5F, 0x72, 0x65, 0x61, 0x64, 0x5F, 0x6F,
  0x6E, 0x6C, 0x79, 0x00, 0x5F, 0x65, 0x64, 0x61, 0x74, 0x61, 0x00, 0x5F,
  0x65, 0x6E, 0x64, 0x00, 0x65, 0x78, 0x69, 0x74, 0x00, 0x6F, 0x70, 0x65,
  0x6E, 0x00, 0x00, 0x2E, 0x73, 0x79, 0x6D, 0x74, 0x61, 0x62, 0x00, 0x2E,
  0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x73, 0x68, 0x73, 0x74,
  0x72, 0x74, 0x61, 0x62, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2E,
  0x72, 0x6F, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E, 0x65, 0x68, 0x5F, 0x66,
  0x72, 0x61, 0x6D, 0x65, 0x00, 0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x2E,
  0x62, 0x73, 0x73, 0x00, 0x2E, 0x63, 0x6F, 0x6D, 0x6D, 0x65, 0x6E, 0x74,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x74, 0x80, 0x04, 0x08,
  0x74, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xF8, 0x80, 0x04, 0x08, 0xF8, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x20, 0x81, 0x04, 0x08, 0x20, 0x01, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x58, 0x91, 0x04, 0x08,
  0x58, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x39, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x60, 0x91, 0x04, 0x08, 0x5C, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5C, 0x01, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x02, 0x00, 0x00,
  0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
size_t const TEST_ELF_SIZE = 1220;

// Output of readelf for the file above:
/*
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Intel 80386
  Version:                           0x1
  Entry point address:               0x8048074
  Start of program headers:          52 (bytes into file)
  Start of section headers:          820 (bytes into file)
  Flags:                             0x0
  Size of this header:               52 (bytes)
  Size of program headers:           32 (bytes)
  Number of program headers:         2
  Size of section headers:           40 (bytes)
  Number of section headers:         10
  Section header string table index: 9

Section Headers:
  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        08048074 000074 000081 00  AX  0   0  1
  [ 2] .rodata           PROGBITS        080480f8 0000f8 000028 00   A  0   0  4
  [ 3] .eh_frame         PROGBITS        08048120 000120 000038 00   A  0   0  4
  [ 4] .data             PROGBITS        08049158 000158 000004 00  WA  0   0  4
  [ 5] .bss              NOBITS          08049160 00015c 000080 00  WA  0   0 32
  [ 6] .comment          PROGBITS        00000000 00015c 000011 01  MS  0   0  1
  [ 7] .symtab           SYMTAB          00000000 000170 000120 10      8   9  4
  [ 8] .strtab           STRTAB          00000000 000290 00005a 00      0   0  1
  [ 9] .shstrtab         STRTAB          00000000 0002ea 000047 00      0   0  1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  p (processor specific)

There are no section groups in this file.

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  LOAD           0x000000 0x08048000 0x08048000 0x00158 0x00158 R E 0x1000
  LOAD           0x000158 0x08049158 0x08049158 0x00004 0x00088 RW  0x1000
*/

static size_t _file_read(struct file * const file,
                         off_t const offset,
                         uint8_t * const buf,
                         size_t const len) {
    ASSERT(offset + len < TEST_ELF_SIZE);
    memcpy(buf, ELF_FILE_DATA + offset, len);
    return len;
}

static size_t _file_write(struct file * const file,
                          off_t const offset,
                          uint8_t const * const buf,
                          size_t const len) {
    PANIC("NOT IMPLEMENTED");
    return 0;
}

struct file_ops const _file_ops = {
    .read = _file_read,
    .write = _file_write,
};

struct file ELF_FILE = {
    .abs_path = "Somewhere",
    .fs_relative_path = "Somewhere",
    .disk = NULL,
    .ops = &_file_ops,
    .lock = INIT_RW_LOCK(),
    .fs_private = NULL,
};

static bool read_elf_header_test(void) {
    struct elf32_ehdr header;
    read_elf_header(&ELF_FILE, &header);
    TEST_ASSERT(memeq(ELF_FILE_DATA, &header, sizeof(header)));
	// Make sure the fields are correct.
	TEST_ASSERT(header.entry == (void*)0x8048074);	
	TEST_ASSERT(header.phoff == 52);	
	TEST_ASSERT(header.shoff == 820);	
	TEST_ASSERT(header.flags == 0);	
	TEST_ASSERT(header.ehsize == 52);	
	TEST_ASSERT(header.phentsize == 32);	
	TEST_ASSERT(header.phnum == 2);	
	TEST_ASSERT(header.shentsize == 40);	
	TEST_ASSERT(header.shnum == 10);	
	TEST_ASSERT(header.shstrndx == 9);	
	return true;
}

static bool check_elf_header_test(void) {
    struct elf32_ehdr header;
    read_elf_header(&ELF_FILE, &header);
    return check_elf_header(&header);
}

static bool segment_flags_to_paging_flags_test(void) {
    elf32_word_t const Z = 0;
    elf32_word_t const E = PHDR_FLAG_EXEC;
    elf32_word_t const W = PHDR_FLAG_WRITE;
    elf32_word_t const R = PHDR_FLAG_READ;

    uint32_t const VM_U = VM_USER;
    uint32_t const VM_N = VM_NON_GLOBAL;
    uint32_t const VM_W = VM_WRITE;

    TEST_ASSERT(segment_flags_to_paging_flags(Z|Z|Z) == (VM_U | VM_N));
    TEST_ASSERT(segment_flags_to_paging_flags(Z|Z|R) == (VM_U | VM_N));
    TEST_ASSERT(segment_flags_to_paging_flags(Z|W|Z) == (VM_U | VM_N | VM_W));
    TEST_ASSERT(segment_flags_to_paging_flags(Z|W|R) == (VM_U | VM_N | VM_W));
    TEST_ASSERT(segment_flags_to_paging_flags(E|Z|Z) == (VM_U | VM_N));
    TEST_ASSERT(segment_flags_to_paging_flags(E|Z|R) == (VM_U | VM_N));
    TEST_ASSERT(segment_flags_to_paging_flags(E|W|Z) == (VM_U | VM_N | VM_W));
    TEST_ASSERT(segment_flags_to_paging_flags(E|W|R) == (VM_U | VM_N | VM_W));
    return true;
}

static bool get_required_num_frames_test(void) {
    TEST_ASSERT(get_required_num_frames((void*)0x10AA, (void*)0x10BB) == 1);
    TEST_ASSERT(get_required_num_frames((void*)0x1000, (void*)0x1FFF) == 1);
    TEST_ASSERT(get_required_num_frames((void*)0x1000, (void*)0x2000) == 2);
    TEST_ASSERT(get_required_num_frames((void*)0x0FFF, (void*)0x2000) == 3);
    return true;
}

static bool read_program_header_test(void) {
    // There are two program headers in the test ELF. See comment containing the
    // output of readelf.
    struct elf32_ehdr header;
    read_elf_header(&ELF_FILE, &header);

    struct elf32_phdr prog_hdr;

    read_program_header(&ELF_FILE, &header, 0, &prog_hdr);
    TEST_ASSERT(prog_hdr.type == PT_LOAD);
    TEST_ASSERT(prog_hdr.offset == 0x0);
    TEST_ASSERT(prog_hdr.vaddr == (void*)0x08048000);
    TEST_ASSERT(prog_hdr.paddr == (void*)0x08048000);
    TEST_ASSERT(prog_hdr.filesz == 0x00158);
    TEST_ASSERT(prog_hdr.memsz == 0x00158);
    TEST_ASSERT(prog_hdr.flags == (PHDR_FLAG_READ | PHDR_FLAG_EXEC));
    TEST_ASSERT(prog_hdr.align == 0x1000);

    read_program_header(&ELF_FILE, &header, 1, &prog_hdr);
    TEST_ASSERT(prog_hdr.type == PT_LOAD);
    TEST_ASSERT(prog_hdr.offset == 0x000158);
    TEST_ASSERT(prog_hdr.vaddr == (void*)0x08049158);
    TEST_ASSERT(prog_hdr.paddr == (void*)0x08049158);
    TEST_ASSERT(prog_hdr.filesz == 0x00004);
    TEST_ASSERT(prog_hdr.memsz == 0x00088);
    TEST_ASSERT(prog_hdr.flags == (PHDR_FLAG_READ | PHDR_FLAG_WRITE));
    TEST_ASSERT(prog_hdr.align == 0x1000);
    return true;
}

static bool load_elf_binary_test(void) {
    struct proc * const proc = create_proc();
    load_elf_binary(&ELF_FILE, proc);

    switch_to_addr_space(proc->addr_space);

    // Check that the two segments are correctly mapped to the process' address
    // space.

    // Segment1 : offset 0x0 in file, mapped to 0x08048000, size of 0x00158.
    TEST_ASSERT(memeq(ELF_FILE_DATA, (void*)0x08048000, 0x00158));

    // Segment2 : offset 0x158 in file, mapped to 0x08049158, size of 0x00088.
    // Note: Range 0x08049158 - 0x0804915B (4 bytes) contains data,
    //       Range 0x0804915C - <end> is zeroed.
    TEST_ASSERT(memeq(ELF_FILE_DATA + 0x158, (void*)0x08049158, 4));
    uint8_t *zero = kmalloc(0x88 - 4);
    TEST_ASSERT(memeq((void*)0x0804915C, zero, 0x88 - 4));
    kfree(zero);

    TEST_ASSERT(proc->registers.eip == (reg_t)0x8048074);

    switch_to_addr_space(get_kernel_addr_space());
    delete_proc(proc);
    return true;
}

static bool load_elf_binary_oom_test(void) {
    struct proc * const proc = create_proc();
    
    frame_alloc_set_oom_simulation(true);
    TEST_ASSERT(!load_elf_binary(&ELF_FILE, proc));
    frame_alloc_set_oom_simulation(false);

    delete_proc(proc);
    CLEAR_ERROR();
    return true;
}

void elf_test(void) {
    TEST_FWK_RUN(read_elf_header_test);
    TEST_FWK_RUN(check_elf_header_test);
    TEST_FWK_RUN(segment_flags_to_paging_flags_test);
    TEST_FWK_RUN(get_required_num_frames_test);
    TEST_FWK_RUN(read_program_header_test);
    TEST_FWK_RUN(load_elf_binary_test);
    TEST_FWK_RUN(load_elf_binary_oom_test);
}
